drop table if exists WorldCountries;
create table WorldCountries(
	Alpha_3 varchar primary key,
	Country unique not null varchar,
	Population2020 not null numeric,
	YearlyChange numeric,
	NetChange numeric,
	Density not null numeric,
	LandArea not null numeric,
	Migrants numeric,
	FertRate not null numeric,
	MedAge not null numeric,
	Urban numeric,
	WorldShare numeric,
	Regions not null varchar
);
select * from WorldCountries;

drop table if exists CountryTerritories;
create table CountryTerritories (
	country unique not null varchar,
	alpha_2 unique not null varchar(2), 
	alpha_3 varchar(3) primary key,
	region not null varchar,
	subregion not null varchar,
	intermediateregion varchar,
	foreign key (alpha_3) references WorldCountries (alpha_3)
);
select * from countryterritories;

drop table if exists eu_countries;
create table eu_countries (
    alpha_3 varchar(3) primary key,
    country unique not null varchar,
    capital unique not null varchar,
    gdp float,
    join_date date,
	currency varchar,
	foreign key (alpha_3) references WorldCountries (alpha_3) 
);
select * from eu_countries;

drop table if exists co2emissions;
create table CO2emissions (
	country unique not null varchar,
	alpha_3 varchar(3) primary key,
	RefYear numeric,
	Total numeric,
	Coal numeric,
	Oil numeric,
	Gas numeric,
	Cement numeric,
	Flaring numeric,
	Other numeric,
	PerCapita numeric,
	foreign key (alpha_3) references WorldCountries (alpha_3)
);
select * from CO2emissions;

-- Index selectivity -> create index on columns that are common in WHERE, ORDER BY and GROUP BY clauses. 
-- We may consider adding an index in colums that are used to relate other tables (through a JOIN, for example)
-- and on values that have big domains, i.e. names, etc. Don't create indexes on columns with small variability,
-- like Male/Female columns.

create index country_index
on worldcountries (country);

create index population_index
on worldcountries (population2020);

create index total_emissions_index
on co2emissions (total)


-- 1. Return the name of country and the medage with medage lower then 30
select country, medage 
from WorldCountries 
group by country, medage 
having medage < '30' 
order by medage ;

-- 2. Retun countries and subregion from country territories that are in the region Europe but not in UE
select country, subregion
from countryterritories ct
where ct.alpha_3 not in (
	select eu.alpha_3
	from eu_countries eu
)
group by country, region, subregion
having ct.region = 'Europe'
order by subregion;

-- 3. Return all the european countries that are not part of the european union and 
-- have population > threshold (5000)
select wc.country, wc.population2020
from worldcountries wc
where
	wc.regions = 'Europe' and
	wc.alpha_3 not in (
		select eu.alpha_3
		from eu_countries eu
	) and 
	wc.population2020 > 5000
group by wc.country, wc.population2020, wc.regions
having wc.regions = 'Europe'
order by wc.population2020 desc;

select * from eu_countries

-- 4. Return the country polulation and subregion of every country such that the total amount of
-- Coal co2Emission from 2010 t0 2020 is less than "number";

-- co2 emissions are measured in million metric tons (MMT)
select wc.country, wc.population2020, sum(co2.coal) as TotalEmissionsInMMT
from worldcountries wc, co2emissions co2
where
	co2.coal is not NULL and
	wc.alpha_3 = co2.alpha_3 and 
	co2.RefYear between 2010 and 2020 
group by wc.alpha_3, wc.country, wc.population2020
having sum(co2.coal) < 100
order by TotalEmissionsInMMT desc;

select * from co2emissions order by total desc

-- 5. Return all the countries in the european union that are not geographically in europe 
-- (maybe Asia like Cyprus)

select wc.alpha_3, wc.country, wc.regions
from eu_countries eu, worldcountries wc
where 
	eu.alpha_3 = wc.alpha_3 and
	wc.regions != 'Europe'

-- 6. For the top 10 region return country, population, land area and density 
select country, population2020, landarea, density
from worldcountries wc
order by wc.population2020 desc
limit 10

-- 7. for every region return the average of population for region and the most country populated

drop view if exists most_populated_country;
create view  Most_populated_country as
select wc.country, wc.population2020, wc.regions
from worldcountries wc
inner join (
	select  max(population2020) as maxp, regions
	from worldcountries
	group by regions
) wc1 on wc.regions = wc1.regions and wc.population2020 = wc1.maxp;

select * from most_populated_country;

drop view if exists avg_population;
create view avg_population as
select wc.regions, avg(wc.population2020)
from worldcountries wc
group by wc.regions;

select * from avg_population;

select 
	avgp.regions, 
	to_char(round(avgp.avg, 2), 'FM999G999G999D99') as average_Population, 
	mpc.country, 
	to_char(mpc.population2020, 'FM999G999G999G999') as population
from avg_population avgp, most_populated_country mpc 
where avgp.regions = mpc.regions;

-- 8. Return region and subregion with the number of countries > threshold

drop view if exists num_countries_for_subregion;
create view num_countries_for_subregion as
select ct.region, ct.subregion, count(ct.country) as num_countries
from countryterritories ct
group by ct.region, ct.subregion
order by num_countries desc;

select *
from num_countries_for_subregion
where num_countries > 10;

-- 9. Return world countries that have a greater population density of all
-- the european countries

-- density = p/km^2
select wc.alpha_3, wc.country, wc.density
from worldcountries wc
where wc.density > (
	select max(wc1.density)
	from worldcountries wc1
	where wc1.regions = 'Asia'
)

-- 10. Return the difference in percentage of emissions of a country between 2010 and 2020

drop view if exists emissions2010;
create view emissions2010 as
select alpha_3, country, total as emissions2010
from co2emissions
where refyear = 2010;
select * from emissions2010;

drop view if exists emissions2020;
create view emissions2020 as
select alpha_3, country, total as emissions2020
from co2emissions
where refyear = 2020;
select * from emissions2020;

select 
	e10.alpha_3, 
	e10.country, 
	e10.emissions2010, 
	e20.emissions2020,
	round(((e20.emissions2020 - e10.emissions2010) / e10.emissions2010) * 100, 2) as percentage
from emissions2010 e10, emissions2020 e20
where 
	e10.alpha_3 = e20.alpha_3 and
	e10.emissions2010 > 0;

-- 11. Return country population, subregion, and total emissions of the top 10 
--countries of CO2 emissions of coal from 2010 to 2020

select wc.country, wc.population2020, ct.subregion, sum(co2.coal) as TotalEmissions
from worldcountries wc, countryterritories ct, co2emissions co2
where 
	co2.coal is not NULL and 
	wc.country = ct.country and
	wc.country = co2.country and 
	co2.RefYear between 2010 and 2020
group by wc.country, wc.population2020, ct.subregion  
ORDER BY TotalEmissions DESC
LIMIT 10;

